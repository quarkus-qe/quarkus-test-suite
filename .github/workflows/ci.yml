name: "Pull Request CI"
on:
  - pull_request
jobs:
  linux-validate-format:
    name: Linux - Validate format
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ 17 ]
    steps:
      - uses: actions/checkout@v3
      - name: Install JDK {{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
          check-latest: true
      - name: Build with Maven
        run: |
          mvn -V -B -s .github/mvn-settings.xml verify -Dall-modules -Dvalidate-format -DskipTests -DskipITs -Dquarkus.container-image.build=false -Dquarkus.container-image.push=false
  detect-test-suite-modules:
    name: Detect Modules in PR
    runs-on: ubuntu-latest
    needs: [ linux-validate-format ]
    steps:
      - uses: actions/checkout@v3
      - id: files
        uses: tj-actions/changed-files@v37
        continue-on-error: true
      - id: detect-changes
        run: |
          MODULES=$(find -name pom.xml | sed -e 's|pom.xml| |' | sed -e 's|./| |' | grep -v " quarkus/")
          CHANGED=""
          MODULES_ARG=""

          for module in $MODULES
          do
            if [[ "${{ steps.files.outputs.all_changed_and_modified_files }}" =~ ("$module") ]] ; then
                CHANGED=$(echo $CHANGED" "$module)
            fi
          done
          
          # trim leading spaces so that module args don't start with comma
          CHANGED="$(echo $CHANGED | xargs)"
          
          MODULES_ARG="${CHANGED// /,}"
          echo "MODULES_ARG=$MODULES_ARG" >> $GITHUB_OUTPUT
    outputs:
      MODULES_ARG: ${{ steps.detect-changes.outputs.MODULES_ARG }}
  prepare-jvm-latest-modules-mvn-param:
    name: Prepare Maven Params For Linux JVM Build
    runs-on: ubuntu-latest
    needs: [ detect-test-suite-modules ]
    env:
      MODULES_ARG: ${{ needs.detect-test-suite-modules.outputs.MODULES_ARG }}
    steps:
      - id: prepare-modules-mvn-param
        run: |
          if [[ -n ${MODULES_ARG} ]]; then
            echo "Running modules: ${MODULES_ARG}"
            echo "MODULES_MAVEN_PARAM=[\" -pl ${MODULES_ARG} -Dall-modules\"]" >> $GITHUB_OUTPUT
          else
            echo "MODULES_MAVEN_PARAM=[' -P root-modules,cache-modules,spring-modules,http-modules,test-tooling-modules', ' -P security-modules,sql-db-modules,messaging-modules,websockets-modules,monitoring-modules']" >> $GITHUB_OUTPUT
          fi
    outputs:
      MODULES_MAVEN_PARAM: ${{ steps.prepare-modules-mvn-param.outputs.MODULES_MAVEN_PARAM }}
  linux-build-jvm-latest:
    name: PR - Linux - JVM build - 3.2
    runs-on: ubuntu-latest
    timeout-minutes: 240
    needs: prepare-jvm-latest-modules-mvn-param
    strategy:
      matrix:
        java: [ 17 ]
        cli: [ 3.2.12.Final ]
        module-mvn-args: ${{ fromJSON(needs.prepare-jvm-latest-modules-mvn-param.outputs.MODULES_MAVEN_PARAM) }}
    steps:
      - uses: actions/checkout@v3
      - name: Reclaim Disk Space
        run: .github/ci-prerequisites.sh
      - name: Install JDK {{ matrix.java }}
        # Uses sha for added security since tags can be updated
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
          check-latest: true
          cache: 'maven'
      - name: Install Quarkus CLI
        run: |
          wget -O quarkus-cli.zip -q --no-check-certificate --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 10 https://github.com/quarkusio/quarkus/releases/download/${{ matrix.cli }}/quarkus-cli-${{ matrix.cli }}.zip
          unzip -qo quarkus-cli.zip
          chmod +x ./quarkus-cli-${{ matrix.cli }}/bin/quarkus
          ./quarkus-cli-${{ matrix.cli }}/bin/quarkus version
      - name: Build with Maven
        run: |
          MODULES_MAVEN_PARAM=""
          if [[ -n ${MODULES_ARG} ]]; then
            echo "Running modules: ${MODULES_ARG}"
            MODULES_MAVEN_PARAM="-pl ${MODULES_ARG}"
          fi

          mvn -fae -V -B -s .github/mvn-settings.xml clean verify -Dinclude.quarkus-cli-tests -Dts.quarkus.cli.cmd="${PWD}/quarkus-cli-${{ matrix.cli }}/bin/quarkus" ${{ matrix.module-mvn-args }} -am
      - name: Zip Artifacts
        if: failure()
        run: |
          zip -R artifacts-latest-linux-jvm${{ matrix.java }}.zip '*-reports/*'
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: ci-artifacts
          path: artifacts-latest-linux-jvm${{ matrix.java }}.zip
  linux-build-native-latest:
    name: PR - Linux - Native build - 3.2
    runs-on: ubuntu-latest
    needs: detect-test-suite-modules
    env:
      MODULES_ARG: ${{ needs.detect-test-suite-modules.outputs.MODULES_ARG }}
    strategy:
      matrix:
        java: [ 11 ]
        cli: [ 3.2.12.Final ]
    steps:
      - uses: actions/checkout@v3
      - name: Reclaim Disk Space
        run: .github/ci-prerequisites.sh
      - name: Install JDK {{ matrix.java }}
        # Uses sha for added security since tags can be updated
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
          check-latest: true
          cache: 'maven'
      - name: Install Quarkus CLI
        run: |
          wget -O quarkus-cli.zip -q --no-check-certificate --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 10 https://github.com/quarkusio/quarkus/releases/download/${{ matrix.cli }}/quarkus-cli-${{ matrix.cli }}.zip
          unzip -qo quarkus-cli.zip
          chmod +x ./quarkus-cli-${{ matrix.cli }}/bin/quarkus
          ./quarkus-cli-${{ matrix.cli }}/bin/quarkus version
      - name: Build with Maven
        run: |
          if [[ -n ${MODULES_ARG} ]]; then
            echo "Running modules: ${MODULES_ARG}"
            mvn -fae -V -B -s .github/mvn-settings.xml -fae -Dall-modules \
                        -Dquarkus.native.native-image-xmx=5g \
                        -Dinclude.quarkus-cli-tests -Dts.quarkus.cli.cmd="${PWD}/quarkus-cli-${{ matrix.cli }}/bin/quarkus" \
                        -pl $MODULES_ARG clean verify -Dnative -am
          fi
      - name: Zip Artifacts
        if: failure()
        run: |
          zip -R artifacts-latest-linux-native${{ matrix.java }}.zip '*-reports/*'
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: ci-artifacts
          path: artifacts-latest-linux-native${{ matrix.java }}.zip
  windows-build-jvm-latest:
    name: PR - Windows - JVM build - 3.2
    runs-on: windows-latest
    needs: detect-test-suite-modules
    env:
      MODULES_ARG: ${{ needs.detect-test-suite-modules.outputs.MODULES_ARG }}
    strategy:
      matrix:
        java: [ 11 ]
    steps:
      - uses: actions/checkout@v3
      - name: Install JDK {{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
          check-latest: true
          cache: 'maven'
      - name: Build in JVM mode
        shell: bash
        run: |
          MODULES_MAVEN_PARAM=""
          if [[ -n ${MODULES_ARG} ]]; then
            echo "Running modules: ${MODULES_ARG}"
            MODULES_MAVEN_PARAM="-pl ${MODULES_ARG}"
          fi

          mvn -B -fae -s .github/mvn-settings.xml clean verify -Dall-modules $MODULES_MAVEN_PARAM -am
      - name: Zip Artifacts
        shell: bash
        if: failure()
        run: |
          # Disambiguate windows find from cygwin find
          /usr/bin/find . -name '*-reports/*' -type d | tar -czf artifacts-latest-windows-jvm${{ matrix.java }}.tar -T -
      - name: Archive artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: ci-artifacts
          path: artifacts-latest-windows-jvm${{ matrix.java }}.tar
