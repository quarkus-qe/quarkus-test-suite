name: "Pull Request CI"
on:
  - pull_request
jobs:
  linux-validate-format:
    name: Linux - Validate format
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ 11 ]
    steps:
      - uses: actions/checkout@v1
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Install JDK {{ matrix.java }}
        uses: joschi/setup-jdk@e87a7cec853d2dd7066adf837fe12bf0f3d45e52
        with:
          java-version: ${{ matrix.java }}
      - name: Build with Maven
        run: |
          mvn -V -B -s .github/mvn-settings.xml verify -Dall-modules -Dvalidate-format -DskipTests -DskipITs
  detect-test-suite-modules:
    name: Detect Modules in PR
    runs-on: ubuntu-latest
    needs: linux-validate-format
    steps:
      - uses: actions/checkout@v1
      - id: files
        uses: jitterbit/get-changed-files@v1
        continue-on-error: true
      - id: detect-changes
        run: |
          MODULES=$(find -name pom.xml | sed -e 's|pom.xml| |' | sed -e 's|./| |' | grep -v " quarkus/")
          CHANGED=""
          MODULES_ARG=""
          for module in $MODULES
          do
              if [[ "${{ steps.files.outputs.all }}" =~ ("$module") ]] ; then
                  CHANGED=$(echo $CHANGED" "$module)
              fi
          done
          MODULES_ARG="${CHANGED// /,}"
          echo "::set-output name=MODULES_ARG::${MODULES_ARG}"
    outputs:
      MODULES_ARG: ${{ steps.detect-changes.outputs.MODULES_ARG }}
  linux-build-jvm-released:
    name: PR - Linux - JVM build - Released Version
    runs-on: ubuntu-latest
    needs: detect-test-suite-modules
    env:
      MODULES_ARG: ${{ needs.detect-test-suite-modules.outputs.MODULES_ARG }}
    strategy:
      matrix:
        java: [ 11 ]
    steps:
      - uses: actions/checkout@v1
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Reclaim Disk Space
        run: .github/ci-prerequisites.sh
      - name: Install JDK {{ matrix.java }}
        # Uses sha for added security since tags can be updated
        uses: joschi/setup-jdk@e87a7cec853d2dd7066adf837fe12bf0f3d45e52
        with:
          java-version: openjdk${{ matrix.java }}
      - name: Build Quarkus CLI
        run: |
          git clone https://github.com/quarkusio/quarkus.git
          cd quarkus
          git checkout 2.2
          mvn versions:set -DnewVersion=2.2.2.Final -DgenerateBackupPoms=false -pl .,build-parent,devtools/cli
          cd devtools/cli
          mvn -B -s ../../../.github/mvn-settings.xml clean install -Dquickly
      - name: Install Quarkus CLI
        run: |
          cat <<EOF > ./quarkus-dev-cli
          #!/bin/bash
          java -jar $PWD/quarkus/devtools/cli/target/quarkus-cli-2.2.2.Final-runner.jar "\$@"
          EOF
          chmod +x ./quarkus-dev-cli
      - name: Build with Maven
        run: |
          MODULES_MAVEN_PARAM=""
          if [[ -n ${MODULES_ARG} ]]; then
            echo "Running modules: ${MODULES_ARG}"
            MODULES_MAVEN_PARAM="-pl ${MODULES_ARG}"
          fi

          mvn -fae -V -B -s .github/mvn-settings.xml clean verify -Dall-modules -Dinclude.quarkus-cli-tests -Dts.quarkus.cli.cmd="${PWD}/quarkus-dev-cli" $MODULES_MAVEN_PARAM
      - name: Zip Artifacts
        if: failure()
        run: |
          zip -R artifacts-released-linux-jvm${{ matrix.java }}.zip '*-reports/*'
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: ci-artifacts
          path: artifacts-released-linux-jvm${{ matrix.java }}.zip
  linux-build-native-released:
    name: PR - Linux - Native build - Released Version
    runs-on: ubuntu-latest
    needs: detect-test-suite-modules
    env:
      MODULES_ARG: ${{ needs.detect-test-suite-modules.outputs.MODULES_ARG }}
    strategy:
      matrix:
        java: [ 11 ]
    steps:
      - uses: actions/checkout@v1
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Reclaim Disk Space
        run: .github/ci-prerequisites.sh
      - name: Install JDK {{ matrix.java }}
        # Uses sha for added security since tags can be updated
        uses: joschi/setup-jdk@e87a7cec853d2dd7066adf837fe12bf0f3d45e52
        with:
          java-version: openjdk${{ matrix.java }}
      - name: Build Quarkus CLI
        run: |
          git clone https://github.com/quarkusio/quarkus.git
          cd quarkus
          git checkout 2.2
          mvn versions:set -DnewVersion=2.2.2.Final -DgenerateBackupPoms=false -pl .,build-parent,devtools/cli
          cd devtools/cli
          mvn -B -s ../../../.github/mvn-settings.xml clean install -Dquickly
      - name: Install Quarkus CLI
        run: |
          cat <<EOF > ./quarkus-dev-cli
          #!/bin/bash
          java -jar $PWD/quarkus/devtools/cli/target/quarkus-cli-2.2.2.Final-runner.jar "\$@"
          EOF
          chmod +x ./quarkus-dev-cli
      - name: Build with Maven
        run: |
          if [[ -n ${MODULES_ARG} ]]; then
            echo "Running modules: ${MODULES_ARG}"
            mvn -fae -V -B -s .github/mvn-settings.xml -fae -Dall-modules -pl $MODULES_ARG clean verify -Dnative \
                        -Dinclude.quarkus-cli-tests -Dts.quarkus.cli.cmd="${PWD}/quarkus-dev-cli"
          fi
      - name: Zip Artifacts
        if: failure()
        run: |
          zip -R artifacts-released-linux-native${{ matrix.java }}.zip '*-reports/*'
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: ci-artifacts
          path: artifacts-released-linux-native${{ matrix.java }}.zip
  windows-build-jvm-released:
    name: PR - Windows - JVM build - Released Version
    runs-on: windows-latest
    needs: detect-test-suite-modules
    env:
      MODULES_ARG: ${{ needs.detect-test-suite-modules.outputs.MODULES_ARG }}
    strategy:
      matrix:
        java: [ 11 ]
    steps:
      - uses: actions/checkout@v1
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Install JDK {{ matrix.java }}
        uses: joschi/setup-jdk@e87a7cec853d2dd7066adf837fe12bf0f3d45e52
        with:
          java-version: ${{ matrix.java }}
      - name: Build in JVM mode
        shell: bash
        run: |
          MODULES_MAVEN_PARAM=""
          if [[ -n ${MODULES_ARG} ]]; then
            echo "Running modules: ${MODULES_ARG}"
            MODULES_MAVEN_PARAM="-pl ${MODULES_ARG}"
          fi

          mvn -fae -s .github/mvn-settings.xml clean verify -Dall-modules $MODULES_MAVEN_PARAM
      - name: Zip Artifacts
        shell: bash
        if: failure()
        run: |
          # Disambiguate windows find from cygwin find
          /usr/bin/find . -name '*-reports/*' -type d | tar -czf artifacts-released-windows-jvm${{ matrix.java }}.tar -T -
      - name: Archive artifacts
        if: failure()
        uses: actions/upload-artifact@v1
        with:
          name: ci-artifacts
          path: artifacts-released-windows-jvm${{ matrix.java }}.tar