<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>io.quarkus.ts.qe</groupId>
    <artifactId>parent</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <packaging>pom</packaging>
    <name>Quarkus QE TS: Parent</name>
    <properties>
        <maven.compiler.parameters>true</maven.compiler.parameters>
        <maven.compiler.release>17</maven.compiler.release>
        <maven-checkstyle-plugin.version>3.3.1</maven-checkstyle-plugin.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <compiler-plugin.version>3.12.1</compiler-plugin.version>
        <surefire-plugin.version>3.2.5</surefire-plugin.version>
        <failsafe-plugin.version>3.2.5</failsafe-plugin.version>
        <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>
        <quarkus.platform.group-id>io.quarkus</quarkus.platform.group-id>
        <quarkus.platform.version>3.8.1</quarkus.platform.version>
        <quarkus.ide.version>3.8.1</quarkus.ide.version>
        <quarkus.qe.framework.version>1.4.2.Beta8</quarkus.qe.framework.version>
        <quarkus-qpid-jms.version>2.5.0</quarkus-qpid-jms.version>
        <apache-httpclient-fluent.version>4.5.14</apache-httpclient-fluent.version>
        <confluent.kafka-avro-serializer.version>7.5.1</confluent.kafka-avro-serializer.version>
        <formatter-maven-plugin.version>2.23.0</formatter-maven-plugin.version>
        <impsort-maven-plugin.version>1.9.0</impsort-maven-plugin.version>
        <xml-format-maven-plugin.version>3.3.1</xml-format-maven-plugin.version>
        <checkstyle.version>10.13.0</checkstyle.version>
        <jsoup.version>1.17.2</jsoup.version>
        <!-- TODO: uncomment Camel Quarkus BOM when Camel Quarkus 3 is released -->
        <!-- <camel-quarkus-bom.version>2.16.0</camel-quarkus-bom.version> -->
        <!-- TODO: https://github.com/quarkiverse/quarkus-helm/issues/114-->
        <!-- <quarkus-helm.version>0.1.1</quarkus-helm.version> -->
        <quarkiverse.config.version>2.3.0</quarkiverse.config.version>
        <quarkiverse.pact.version>1.1.0</quarkiverse.pact.version>
        <quarkiverse.smallrye-opentracing.version>1.0.0</quarkiverse.smallrye-opentracing.version>
        <smallrye-stork.version>2.5.0</smallrye-stork.version>
        <assertj.version>3.25.2</assertj.version>
        <profile.id>jvm</profile.id>
        <htmlunit.version>3.10.0</htmlunit.version>
        <!-- Faster build when using -DskipTests -->
        <quarkus.build.skip>${skipTests}</quarkus.build.skip>
        <!-- S2i configuration -->
        <quarkus.s2i.base-jvm-image>registry.access.redhat.com/ubi8/openjdk-17:latest</quarkus.s2i.base-jvm-image>
        <quarkus.s2i.base-native-image>quay.io/quarkus/ubi-quarkus-native-binary-s2i:2.0</quarkus.s2i.base-native-image>
        <!-- Default values for format -->
        <src.format.goal>format</src.format.goal>
        <src.sort.goal>sort</src.sort.goal>
        <xml.format.goal>xml-format</xml.format.goal>
        <!-- Failsafe inclusions/exclusions rules -->
        <include.tests>**/*IT.java</include.tests>
        <exclude.openshift.tests>**/OpenShift*IT.java</exclude.openshift.tests>
        <exclude.serverless.openshift.tests>**/Serverless*OpenShift*IT.java</exclude.serverless.openshift.tests>
        <exclude.operator.openshift.tests>**/Operator*OpenShift*IT.java</exclude.operator.openshift.tests>
        <exclude.quarkus.cli.tests>**/QuarkusCli*IT.java</exclude.quarkus.cli.tests>
        <exclude.quarkus.devmode.tests>no</exclude.quarkus.devmode.tests>
        <!-- Docker images used by both surefire and failsafe plugin -->
        <postgresql.latest.image>docker.io/postgres:16.1</postgresql.latest.image>
        <mysql.80.image>registry.access.redhat.com/rhscl/mysql-80-rhel7</mysql.80.image>
        <rhbk.image>registry.redhat.io/rhbk/keycloak-rhel9:22-8</rhbk.image>
        <wiremock-jre8.version>2.35.1</wiremock-jre8.version>
        <build-reporter-maven-extension.version>3.4.4</build-reporter-maven-extension.version>
        <reruns>2</reruns>
        <oc.reruns>1</oc.reruns>
    </properties>
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>${quarkus.platform.group-id}</groupId>
                <artifactId>${quarkus.platform.artifact-id}</artifactId>
                <version>${quarkus.platform.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>io.quarkus.qe</groupId>
                <artifactId>quarkus-test-parent</artifactId>
                <version>${quarkus.qe.framework.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- TODO: uncomment Camel Quarkus BOM when 3.0 is released -->
            <!-- Disabled due to https://github.com/quarkusio/quarkus/issues/31105#issuecomment-1431441875 -->
            <!-- <dependency> -->
            <!-- <groupId>org.apache.camel.quarkus</groupId> -->
            <!-- <artifactId>camel-quarkus-bom</artifactId> -->
            <!-- <version>${camel-quarkus-bom.version}</version> -->
            <!-- <type>pom</type> -->
            <!-- <scope>import</scope> -->
            <!-- </dependency> -->
            <dependency>
                <groupId>io.confluent</groupId>
                <artifactId>kafka-avro-serializer</artifactId>
                <version>${confluent.kafka-avro-serializer.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.httpcomponents</groupId>
                <artifactId>fluent-hc</artifactId>
                <version>${apache-httpclient-fluent.version}</version>
            </dependency>
            <dependency>
                <groupId>org.amqphub.quarkus</groupId>
                <artifactId>quarkus-qpid-jms</artifactId>
                <version>${quarkus-qpid-jms.version}</version>
            </dependency>
            <dependency>
                <groupId>org.jsoup</groupId>
                <artifactId>jsoup</artifactId>
                <version>${jsoup.version}</version>
            </dependency>
            <!-- TODO: https://github.com/quarkiverse/quarkus-helm/issues/114-->
            <!--            <dependency>-->
            <!--                <groupId>io.quarkiverse.helm</groupId>-->
            <!--                <artifactId>quarkus-helm</artifactId>-->
            <!--                <version>${quarkus-helm.version}</version>-->
            <!--            </dependency>-->
            <dependency>
                <groupId>com.github.tomakehurst</groupId>
                <artifactId>wiremock-jre8</artifactId>
                <version>${wiremock-jre8.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.assertj</groupId>
                <artifactId>assertj-core</artifactId>
                <scope>test</scope>
                <version>${assertj.version}</version>
            </dependency>
            <dependency>
                <groupId>org.htmlunit</groupId>
                <artifactId>htmlunit</artifactId>
                <version>${htmlunit.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>io.quarkiverse.pact</groupId>
                <artifactId>quarkus-pact-provider</artifactId>
                <version>${quarkiverse.pact.version}</version>
            </dependency>
            <dependency>
                <groupId>io.quarkiverse.pact</groupId>
                <artifactId>quarkus-pact-consumer</artifactId>
                <version>${quarkiverse.pact.version}</version>
            </dependency>
            <dependency>
                <groupId>io.quarkiverse.opentracing</groupId>
                <artifactId>quarkus-smallrye-opentracing</artifactId>
                <version>${quarkiverse.smallrye-opentracing.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>io.quarkus.qe</groupId>
            <artifactId>quarkus-test-containers</artifactId>
            <version>${quarkus.qe.framework.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.quarkus.qe</groupId>
            <artifactId>quarkus-test-openshift</artifactId>
            <version>${quarkus.qe.framework.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-junit5</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.awaitility</groupId>
            <artifactId>awaitility</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <build>
        <extensions>
            <!-- Build Reporter collects and generates build reports analyzed by Jenkins jobs using AWS EC2 Windows-->
            <extension>
                <groupId>io.quarkus.bot</groupId>
                <artifactId>build-reporter-maven-extension</artifactId>
                <version>${build-reporter-maven-extension.version}</version>
            </extension>
        </extensions>
        <pluginManagement>
            <plugins>
                <plugin>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${surefire-plugin.version}</version>
                    <configuration>
                        <rerunFailingTestsCount>${reruns}</rerunFailingTestsCount>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>${failsafe-plugin.version}</version>
                    <configuration>
                        <!-- fixes unavailable native binary build logs, https://github.com/quarkus-qe/quarkus-test-framework/issues/785 -->
                        <forkNode implementation="org.apache.maven.plugin.surefire.extensions.SurefireForkNodeFactory"/>
                        <rerunFailingTestsCount>${reruns}</rerunFailingTestsCount>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>${quarkus.platform.group-id}</groupId>
                <artifactId>quarkus-maven-plugin</artifactId>
                <version>${quarkus.platform.version}</version>
                <executions>
                    <execution>
                        <id>build</id>
                        <goals>
                            <goal>build</goal>
                            <goal>generate-code</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${compiler-plugin.version}</version>
            </plugin>
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <systemPropertyVariables>
                        <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                        <!-- Services used in test suite -->
                        <postgresql.latest.image>${postgresql.latest.image}</postgresql.latest.image>
                        <mysql.80.image>${mysql.80.image}</mysql.80.image>
                    </systemPropertyVariables>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                        <configuration>
                            <includes>
                                <include>${include.tests}</include>
                            </includes>
                            <excludes>
                                <exclude>${exclude.openshift.tests}</exclude>
                                <exclude>${exclude.serverless.openshift.tests}</exclude>
                                <exclude>${exclude.operator.openshift.tests}</exclude>
                                <exclude>${exclude.quarkus.cli.tests}</exclude>
                                <exclude>${exclude.quarkus.devmode.tests}</exclude>
                            </excludes>
                            <systemPropertyVariables>
                                <profile.id>${profile.id}</profile.id>
                                <!-- S2i configuration for OpenShift -->
                                <quarkus.s2i.base-jvm-image>${quarkus.s2i.base-jvm-image}</quarkus.s2i.base-jvm-image>
                                <quarkus.s2i.base-native-image>${quarkus.s2i.base-native-image}</quarkus.s2i.base-native-image>
                                <!-- Services used in test suite -->
                                <nginx.image>docker.io/library/nginx:1-alpine</nginx.image>
                                <amqbroker.image>registry.access.redhat.com/amq-broker-7/amq-broker-72-openshift:latest</amqbroker.image>
                                <amqbroker.1.0x.image>quay.io/artemiscloud/activemq-artemis-broker:1.0.25</amqbroker.1.0x.image>
                                <redpanda.image>redpandadata/redpanda:v23.3.4</redpanda.image>
                                <postgresql.latest.image>${postgresql.latest.image}</postgresql.latest.image>
                                <elastic.7x.image>docker.io/library/elasticsearch:7.17.17</elastic.7x.image>
                                <mysql.57.image>docker.io/library/mysql:5.7.44</mysql.57.image>
                                <mysql.upstream.80.image>docker.io/library/mysql:8.0</mysql.upstream.80.image>
                                <mysql.80.image>${mysql.80.image}</mysql.80.image>
                                <mariadb.10.image>docker.io/library/mariadb:10.11</mariadb.10.image>
                                <mssql.image>mcr.microsoft.com/mssql/rhel/server:2022-latest</mssql.image>
                                <!-- Oracle image - we aim to use same version as Dev Services for Oracle so that we only download one image -->
                                <oracle.image>docker.io/gvenzl/oracle-free:23-slim-faststart</oracle.image>
                                <db2.image>quay.io/quarkusqeteam/db2:11.5.7.0</db2.image>
                                <mongodb.image>docker.io/library/mongo:5.0</mongodb.image>
                                <redis.image>docker.io/library/redis:7.2</redis.image>
                                <wiremock.image>docker.io/wiremock/wiremock:3.3.1</wiremock.image>
                                <!-- TODO use official image when/if this fixed https://github.com/hashicorp/docker-consul/issues/184 -->
                                <consul.image>docker.io/bitnami/consul:1.17.2</consul.image>
                                <infinispan.image>quay.io/infinispan/server:14.0</infinispan.image>
                                <infinispan.expected-log>Infinispan Server.*started in</infinispan.expected-log>
                                <spring.cloud.server.image>quay.io/quarkusqeteam/spring-cloud-config-server:3.0</spring.cloud.server.image>
                                <keycloak.image>quay.io/keycloak/keycloak:23.0.6</keycloak.image>
                                <bouncycastle.bctls-fips.version>1.0.12.2</bouncycastle.bctls-fips.version>
                                <rhbk.image>${rhbk.image}</rhbk.image>
                            </systemPropertyVariables>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <trimStackTrace>false</trimStackTrace>
                </configuration>
            </plugin>
            <plugin>
                <groupId>net.revelc.code.formatter</groupId>
                <artifactId>formatter-maven-plugin</artifactId>
                <version>${formatter-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>${src.format.goal}</goal>
                        </goals>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <artifactId>quarkus-ide-config</artifactId>
                        <groupId>io.quarkus</groupId>
                        <version>${quarkus.ide.version}</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <configFile>eclipse-format.xml</configFile>
                    <lineEnding>LF</lineEnding>
                </configuration>
            </plugin>
            <plugin>
                <groupId>net.revelc.code</groupId>
                <artifactId>impsort-maven-plugin</artifactId>
                <version>${impsort-maven-plugin.version}</version>
                <configuration>
                    <!-- store outside of target to speed up formatting when mvn clean is used -->
                    <cachedir>.cache</cachedir>
                    <groups>java.,jakarta.,org.,com.,io.</groups>
                    <staticGroups>*</staticGroups>
                    <removeUnused>true</removeUnused>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>${src.sort.goal}</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>au.com.acegi</groupId>
                <artifactId>xml-format-maven-plugin</artifactId>
                <version>${xml-format-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>${xml.format.goal}</goal>
                        </goals>
                        <configuration>
                            <indentSize>4</indentSize>
                            <excludes>
                                <!-- Exclude files from target folder -->
                                <exclude>**/target/**/*.xml</exclude>
                                <!-- Exclude Quarkus main repository -->
                                <exclude>**/quarkus/**/*.xml</exclude>
                                <!-- Exclude .idea -->
                                <exclude>.idea/**</exclude>
                                <!-- Exclude .github -->
                                <exclude>.github/**</exclude>
                            </excludes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>${maven-checkstyle-plugin.version}</version>
                <configuration>
                    <configLocation>checkstyle.xml</configLocation>
                    <!-- To exclude autogenerated sources -->
                    <sourceDirectories>${project.build.sourceDirectory}</sourceDirectories>
                    <encoding>UTF-8</encoding>
                    <consoleOutput>true</consoleOutput>
                    <failsOnError>true</failsOnError>
                    <linkXRef>true</linkXRef>
                    <includeTestSourceDirectory>true</includeTestSourceDirectory>
                </configuration>
                <executions>
                    <execution>
                        <id>validate</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>com.puppycrawl.tools</groupId>
                        <artifactId>checkstyle</artifactId>
                        <version>${checkstyle.version}</version>
                    </dependency>
                </dependencies>
            </plugin>
        </plugins>
    </build>
    <profiles>
        <profile>
            <id>env-info</id>
            <build>
                <defaultGoal>clean compile</defaultGoal>
            </build>
            <modules>
                <module>env-info</module>
            </modules>
        </profile>
        <profile>
            <id>root-modules</id>
            <activation>
                <activeByDefault>true</activeByDefault>
                <property>
                    <name>all-modules</name>
                </property>
            </activation>
            <modules>
                <module>env-info</module>
                <module>config</module>
                <module>properties</module>
                <module>docker-build</module>
                <module>javaee-like-getting-started</module>
                <module>scaling</module>
                <module>service-discovery/stork</module>
                <module>service-discovery/stork-custom</module>
                <module>lifecycle-application</module>
                <module>external-applications</module>
                <module>scheduling/quartz</module>
                <module>super-size/many-extensions</module>
                <module>quarkus-cli</module>
                <module>logging/jboss</module>
                <module>qute/multimodule</module>
                <module>qute/synchronous</module>
                <module>qute/reactive</module>
                <!-- TODO: https://github.com/quarkiverse/quarkus-helm/issues/114-->
                <!-- <module>helm/helm-minimum</module> -->
                <module>funqy/knative-events</module>
                <module>build-time-analytics</module>
            </modules>
        </profile>
        <profile>
            <id>root-modules-no-qute</id>
            <modules>
                <module>env-info</module>
                <module>config</module>
                <module>properties</module>
                <module>docker-build</module>
                <module>javaee-like-getting-started</module>
                <module>scaling</module>
                <module>lifecycle-application</module>
                <module>external-applications</module>
                <module>scheduling/quartz</module>
                <module>super-size/many-extensions</module>
                <module>quarkus-cli</module>
                <module>logging/jboss</module>
                <module>build-time-analytics</module>
            </modules>
        </profile>
        <profile>
            <id>cache-modules</id>
            <activation>
                <activeByDefault>true</activeByDefault>
                <property>
                    <name>all-modules</name>
                </property>
            </activation>
            <modules>
                <module>env-info</module>
                <module>cache/caffeine</module>
                <module>cache/redis</module>
                <module>infinispan-client</module>
            </modules>
        </profile>
        <profile>
            <id>http-modules</id>
            <activation>
                <activeByDefault>true</activeByDefault>
                <property>
                    <name>all-modules</name>
                </property>
            </activation>
            <modules>
                <module>env-info</module>
                <module>http/http-minimum</module>
                <module>http/http-minimum-reactive</module>
                <module>http/http-advanced</module>
                <module>http/http-advanced-reactive</module>
                <module>http/http-static</module>
                <module>http/jakarta-rest</module>
                <module>http/jakarta-rest-reactive</module>
                <module>http/reactive-routes</module>
                <module>http/rest-client</module>
                <module>http/rest-client-reactive</module>
                <module>http/rest-client-reactive-vanilla</module>
                <module>http/servlet-undertow</module>
                <module>http/vertx-web-client</module>
                <module>http/vertx-web-validation</module>
                <module>http/hibernate-validator</module>
                <module>http/graphql</module>
                <module>http/graphql-telemetry</module>
                <module>http/vertx</module>
                <module>http/management</module>
            </modules>
        </profile>
        <profile>
            <id>security-modules</id>
            <activation>
                <activeByDefault>true</activeByDefault>
                <property>
                    <name>all-modules</name>
                </property>
            </activation>
            <modules>
                <module>env-info</module>
                <module>security/basic</module>
                <module>security/bouncycastle-fips</module>
                <module>security/form-authn</module>
                <module>security/https</module>
                <module>security/jwt</module>
                <module>security/keycloak</module>
                <module>security/keycloak-authz-classic</module>
                <module>security/keycloak-authz-reactive</module>
                <module>security/keycloak-jwt</module>
                <module>security/keycloak-webapp</module>
                <module>security/keycloak-oauth2</module>
                <module>security/keycloak-multitenant</module>
                <module>security/keycloak-oidc-client-basic</module>
                <module>security/keycloak-oidc-client-extended</module>
                <module>security/keycloak-oidc-client-reactive-basic</module>
                <module>security/keycloak-oidc-client-reactive-extended</module>
                <module>security/vertx-jwt</module>
                <module>security/oidc-client-mutual-tls</module>
                <module>security/webauthn</module>
            </modules>
        </profile>
        <profile>
            <id>messaging-modules</id>
            <activation>
                <activeByDefault>true</activeByDefault>
                <property>
                    <name>all-modules</name>
                </property>
            </activation>
            <modules>
                <module>env-info</module>
                <module>messaging/amqp-reactive</module>
                <module>messaging/qpid</module>
                <module>messaging/kafka-streams-reactive-messaging</module>
                <module>messaging/kafka-confluent-avro-reactive-messaging</module>
                <module>messaging/kafka-strimzi-avro-reactive-messaging</module>
                <module>messaging/kafka-producer</module>
                <module>messaging/kafkaSSL</module>
                <module>messaging/infinispan-grpc-kafka</module>
                <module>messaging/cloud-events/amqp-binary</module>
                <module>messaging/cloud-events/amqp-json</module>
            </modules>
        </profile>
        <profile>
            <id>messaging-modules-no-kafka</id>
            <modules>
                <module>env-info</module>
                <module>messaging/amqp-reactive</module>
                <module>messaging/qpid</module>
            </modules>
        </profile>
        <profile>
            <id>monitoring-modules</id>
            <activation>
                <activeByDefault>true</activeByDefault>
                <property>
                    <name>all-modules</name>
                </property>
            </activation>
            <modules>
                <module>env-info</module>
                <module>monitoring/micrometer-prometheus</module>
                <module>monitoring/micrometer-prometheus-kafka</module>
                <module>monitoring/micrometer-prometheus-kafka-reactive</module>
                <module>monitoring/micrometer-prometheus-oidc</module>
                <module>monitoring/opentelemetry</module>
                <module>monitoring/opentelemetry-reactive</module>
                <module>monitoring/microprofile-opentracing</module>
                <module>monitoring/opentracing-reactive-grpc</module>
            </modules>
        </profile>
        <profile>
            <id>sql-db-modules</id>
            <activation>
                <activeByDefault>true</activeByDefault>
                <property>
                    <name>all-modules</name>
                </property>
            </activation>
            <modules>
                <module>env-info</module>
                <module>sql-db/hibernate</module>
                <module>sql-db/sql-app</module>
                <module>sql-db/sql-app-compatibility</module>
                <module>sql-db/multiple-pus</module>
                <module>sql-db/panache-flyway</module>
                <module>sql-db/reactive-rest-data-panache</module>
                <module>sql-db/vertx-sql</module>
                <module>sql-db/hibernate-reactive</module>
                <module>sql-db/reactive-vanilla</module>
                <module>sql-db/hibernate-fulltext-search</module>
                <module>sql-db/narayana-transactions</module>
            </modules>
        </profile>
        <profile>
            <id>nosql-db-modules</id>
            <activation>
                <activeByDefault>true</activeByDefault>
                <property>
                    <name>all-modules</name>
                </property>
            </activation>
            <modules>
                <module>env-info</module>
                <module>nosql-db/mongodb</module>
                <module>nosql-db/mongodb-reactive</module>
                <module>nosql-db/infinispan</module>
                <module>nosql-db/elasticsearch</module>
            </modules>
        </profile>
        <profile>
            <id>service-binding-modules</id>
            <activation>
                <activeByDefault>true</activeByDefault>
                <property>
                    <name>all-modules</name>
                </property>
            </activation>
            <modules>
                <module>env-info</module>
                <module>service-binding/postgresql-crunchy-classic</module>
                <module>service-binding/postgresql-crunchy-reactive</module>
            </modules>
        </profile>
        <profile>
            <id>spring-modules</id>
            <activation>
                <activeByDefault>true</activeByDefault>
                <property>
                    <name>all-modules</name>
                </property>
            </activation>
            <modules>
                <module>env-info</module>
                <module>spring/spring-data</module>
                <module>spring/spring-web</module>
                <module>spring/spring-web-reactive</module>
                <module>spring/spring-properties</module>
                <module>spring/spring-cloud-config</module>
                <module>cache/spring</module>
                <module>scheduling/spring</module>
            </modules>
        </profile>
        <profile>
            <id>test-tooling-modules</id>
            <activation>
                <activeByDefault>true</activeByDefault>
                <property>
                    <name>all-modules</name>
                </property>
            </activation>
            <modules>
                <module>test-tooling/pact</module>
            </modules>
        </profile>
        <profile>
            <id>websockets-modules</id>
            <activation>
                <activeByDefault>true</activeByDefault>
                <property>
                    <name>all-modules</name>
                </property>
            </activation>
            <modules>
                <module>env-info</module>
                <module>websockets/quarkus-websockets</module>
                <module>websockets/websockets-client</module>
            </modules>
        </profile>
        <profile>
            <id>native</id>
            <activation>
                <property>
                    <name>native</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <skipTests>true</skipTests>
                        </configuration>
                    </plugin>
                    <plugin>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <executions>
                            <execution>
                                <configuration>
                                    <systemPropertyVariables>
                                        <native.image.path>${project.build.directory}/${project.build.finalName}-runner</native.image.path>
                                        <quarkus.package.type>${quarkus.package.type}</quarkus.package.type>
                                        <quarkus.native.container-build>${quarkus.native.container-build}</quarkus.native.container-build>
                                        <quarkus.native.native-image-xmx>${quarkus.native.native-image-xmx}</quarkus.native.native-image-xmx>
                                        <quarkus.native.builder-image>${quarkus.native.builder-image}</quarkus.native.builder-image>
                                    </systemPropertyVariables>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
            <properties>
                <profile.id>native</profile.id>
                <quarkus.package.type>native</quarkus.package.type>
                <quarkus.native.container-build>true</quarkus.native.container-build>
                <quarkus.native.native-image-xmx>4g</quarkus.native.native-image-xmx>
                <quarkus.native.builder-image>quay.io/quarkus/ubi-quarkus-mandrel-builder-image:jdk-21</quarkus.native.builder-image>
                <exclude.quarkus.devmode.tests>**/*DevMode*IT.java</exclude.quarkus.devmode.tests>
            </properties>
        </profile>
        <profile>
            <!-- You need to be connected to an OpenShift instance to activate this
                profile! -->
            <id>openshift</id>
            <activation>
                <property>
                    <name>openshift</name>
                </property>
            </activation>
            <properties>
                <include.tests>**/*OpenShift*IT.java</include.tests>
                <exclude.openshift.tests>no</exclude.openshift.tests>
            </properties>
        </profile>
        <profile>
            <id>redhat-registry</id>
            <activation>
                <property>
                    <name>openshift</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <skipTests>true</skipTests>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <configuration>
                            <systemPropertyVariables>
                                <ts.redhat.registry.enabled>true</ts.redhat.registry.enabled>
                                <!-- Product Services -->
                                <rhbk.image>${rhbk.image}</rhbk.image>
                                <postgresql.10.image>registry.redhat.io/rhel8/postgresql-10</postgresql.10.image>
                                <postgresql.latest.image>registry.redhat.io/rhel9/postgresql-15</postgresql.latest.image>
                                <mariadb.103.image>registry.redhat.io/rhel8/mariadb-103</mariadb.103.image>
                                <mariadb.105.image>registry.redhat.io/rhel9/mariadb-105</mariadb.105.image>
                                <amq-streams.image>registry.redhat.io/amq-streams/kafka-35-rhel8</amq-streams.image>
                                <amq-streams.version>2.6.0</amq-streams.version>
                            </systemPropertyVariables>
                            <rerunFailingTestsCount>${oc.reruns}</rerunFailingTestsCount>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <!-- You need to be connected to an OpenShift instance to activate this
                profile! -->
            <id>openshift-arm</id>
            <activation>
                <property>
                    <name>openshift-arm</name>
                </property>
            </activation>
            <properties>
                <include.tests>**/*OpenShift*IT.java</include.tests>
                <exclude.openshift.tests>no</exclude.openshift.tests>
            </properties>
        </profile>
        <profile>
            <id>openshift-arm-containers</id>
            <activation>
                <property>
                    <name>openshift-arm</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>integration-test</goal>
                                    <goal>verify</goal>
                                </goals>
                                <configuration>
                                    <systemPropertyVariables>
                                        <ts.arm.missing.services.excludes>true</ts.arm.missing.services.excludes>
                                        <ts.redhat.registry.enabled>true</ts.redhat.registry.enabled>
                                        <!-- Product Services -->
                                        <rhbk.image>${rhbk.image}</rhbk.image>
                                        <postgresql.10.image>registry.redhat.io/rhel8/postgresql-10</postgresql.10.image>
                                        <mysql.80.image>registry.redhat.io/rhel8/mysql-80</mysql.80.image>
                                        <mariadb.103.image>registry.redhat.io/rhel8/mariadb-103</mariadb.103.image>
                                        <mariadb.105.image>registry.redhat.io/rhel8/mariadb-105</mariadb.105.image>
                                        <amq-streams.image>registry.redhat.io/amq-streams/kafka-35-rhel8</amq-streams.image>
                                        <amq-streams.version>2.6.0</amq-streams.version>
                                        <!-- run 'docker manifest inspect mongo:5.0' and use digest for architecture 'arm64', variant '8', os 'linux' -->
                                        <mongodb.image>docker.io/library/mongo@sha256:6f851e31a1b317c6fa681b7dad5f94c622f1c3588477f3b769579dc5462ee659</mongodb.image>
                                    </systemPropertyVariables>
                                    <rerunFailingTestsCount>${oc.reruns}</rerunFailingTestsCount>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>openshift-ibm-z-p</id>
            <activation>
                <property>
                    <name>openshift-ibm-z-p</name>
                </property>
            </activation>
            <properties>
                <include.tests>**/*OpenShift*IT.java</include.tests>
                <exclude.openshift.tests>no</exclude.openshift.tests>
            </properties>
        </profile>
        <profile>
            <id>openshift-ibm-z-p-containers</id>
            <activation>
                <property>
                    <name>openshift-ibm-z-p</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>integration-test</goal>
                                    <goal>verify</goal>
                                </goals>
                                <configuration>
                                    <systemPropertyVariables>
                                        <ts.ibm-z-p.missing.services.excludes>true</ts.ibm-z-p.missing.services.excludes>
                                        <ts.redhat.registry.enabled>true</ts.redhat.registry.enabled>
                                        <!-- Product Services -->
                                        <amqbroker.image>registry.redhat.io/amq7/amq-broker-rhel8:7.11</amqbroker.image>
                                        <rhbk.image>${rhbk.image}</rhbk.image>
                                        <postgresql.10.image>registry.redhat.io/rhel8/postgresql-10</postgresql.10.image>
                                        <mysql.80.image>registry.redhat.io/rhel8/mysql-80</mysql.80.image>
                                        <mariadb.103.image>registry.redhat.io/rhel8/mariadb-103</mariadb.103.image>
                                        <mariadb.105.image>registry.redhat.io/rhel8/mariadb-105</mariadb.105.image>
                                        <amq-streams.image>registry.redhat.io/amq-streams/kafka-35-rhel8</amq-streams.image>
                                        <amq-streams.version>2.6.0</amq-streams.version>
                                        <mongodb.image>docker.io/library/mongo:4.4.6</mongodb.image>
                                    </systemPropertyVariables>
                                    <rerunFailingTestsCount>${oc.reruns}</rerunFailingTestsCount>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>serverless</id>
            <activation>
                <property>
                    <name>include.serverless</name>
                </property>
            </activation>
            <properties>
                <exclude.serverless.openshift.tests>no</exclude.serverless.openshift.tests>
            </properties>
        </profile>
        <profile>
            <id>operator-scenarios</id>
            <activation>
                <property>
                    <name>include.operator-scenarios</name>
                </property>
            </activation>
            <properties>
                <exclude.operator.openshift.tests>no</exclude.operator.openshift.tests>
            </properties>
        </profile>
        <profile>
            <id>quarkus-cli-tests</id>
            <activation>
                <property>
                    <name>include.quarkus-cli-tests</name>
                </property>
            </activation>
            <properties>
                <exclude.quarkus.cli.tests>no</exclude.quarkus.cli.tests>
            </properties>
        </profile>
        <profile>
            <id>validate-format</id>
            <activation>
                <property>
                    <name>validate-format</name>
                </property>
            </activation>
            <properties>
                <src.format.goal>validate</src.format.goal>
                <src.sort.goal>check</src.sort.goal>
                <xml.format.goal>xml-check</xml.format.goal>
            </properties>
        </profile>
        <profile>
            <!-- makes it possible to start and keep alive app, containers, OCP namespace as long as you need -->
            <id>ts.debug</id>
            <activation>
                <property>
                    <!-- 'debug' property is used by Quarkus DEV mode, so we don't want to propagate it -->
                    <name>ts.debug</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <dependencies>
                            <dependency>
                                <groupId>io.quarkus.qe</groupId>
                                <artifactId>quarkus-test-core</artifactId>
                                <version>${quarkus.qe.framework.version}</version>
                            </dependency>
                        </dependencies>
                        <configuration>
                            <!--don't time out, wait for termination signal from user that debugging is over -->
                            <forkedProcessTimeoutInSeconds>0</forkedProcessTimeoutInSeconds>
                            <!--our ForkNode factory helps us to propagate termination signal down to JUnit provider -->
                            <forkNode implementation="io.quarkus.test.debug.SureFireDebugForkNodeFactory"/>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
